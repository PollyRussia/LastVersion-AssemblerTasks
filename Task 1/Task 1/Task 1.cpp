// Task 1.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"
#include <iostream>
using namespace std;

int main()
{
	// ПЕРЕМЕННЫЕ
	int n, m; // размерность матрицы - строки столбцы
	int min1, max1; // min1 - минимальный элемент текущей строки, max1 - макс элемент среди минимумов строк
	int max2, min2; // max2 - максимальный элемент текущей строки, min2 - мин элемент среди максимумов строк
	int ind = 0; // индекс седловой точки
	int arr[100][100]; // массив матрицы

	setlocale(LC_ALL, "RUS");
	cout << "Задача 1" << "\n";
	cout << "Процедура поиска седлового элемента матрицы" << "\n";

	// ВВОД
	cout << "Введите разрядность матрицы: n m" << "\n";
	cin >> n >> m;
	cout << "Введите элементы матрицы" << "\n";
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> arr[i][j];

	// ПОИСК СЕДЛОВОЙ ТОЧКИ
	_asm
	{
	// ПОИСК МАКСИМУМА СРЕДИ МИНИМУМОВ
		mov eax, arr // запоминаем первый элемент массива
		mov max1, -2147483648 // (нач значение min int)
		mov ecx, n // loop1 (n -> 0)
		mov esi, 0 // индекс первого элемента массива

	loop1:
	// начало цикла 1 - поиск максимума среди минимумов
		mov ebx, esi // сохраняем индекс первого элемента текущей строки
		push ecx // поместить счетчик loop1 в стек, чтобы не потерять в цикле 1-1
		mov eax, arr[esi] // запоминаем текущий элемент
		mov min1, eax // запоминаем его как минимум текущей строки
		mov ecx, m // loop11 (m -> 0)

	loop11 :
	// начало цикла 1-1 - поиск минимума в строке
		mov eax, min1 // записываем текущий мин в строке
		cmp eax, arr[esi] // сравниваем его с элементом
		jl prime11 // если минимум меньше элемента - переход
		mov eax, arr[esi] // иначе меняем значение минимума
		mov min1, eax
		mov ind, esi // запоминаем индекс

	prime11 :
		add esi, 4 // задаем номер следующего элемента (размер одного 4)
		loop loop11
	// конец цикла 1-1
		mov eax, max1 // записываем текущее значение макс среди мин
		cmp eax, min1 // сравниваем его с мин текущей строки
		jg prime1 // если текущий макс среди мин >= тек мин -> переход
		mov eax, min1 //иначе запоминаем значение тек мин как максимальное среди мин
		mov max1, eax
		mov edx, ind // запоминаем индекс (min1 - последний текущий минимум, его индекс мы сохранили)

	prime1 :
		add ebx, 400 // переход к следующей строке 4*100
		mov esi, ebx // задаем номер первого элемента следующей строки
		pop ecx // возвращаем счетчик цикла loop1 из стека
		loop loop1
		// конец цикла 1

		mov ind, edx // возвращаем индекс в основную программу

		// ПОИСК МИНИМУМА СРЕДИ МАКСИМУМОВ
		mov eax, arr // запоминаем первый элемент массива
		mov min2, 2147483647 // (нач значение max int)
		mov ecx, m // loop2 (m -> 0)
		mov esi, 0

	loop2:
		// начало цикла 2 - поиск минимума среди максимумов
		push ecx // поместить счетчик loop2 в стек, чтобы не потерять в цикле 2-1
		mov ebx, esi // сохраняем индекс первого элемента текущего столбца
		mov eax, arr[esi] // запоминаем текущий элемент
		mov max2, eax // запоминаем его как максимум текущего столбца
		mov ecx, n   // // loop21 (n -> 0)

	loop21 :
		// начало цикла 2-1 - поиск максимума в столбце
		mov eax, max2 // запоминаем максимальный элемент
		cmp eax, arr[esi] // сравниваем максимальный и текущий элементы
		jg prime21 // eax >= a[esi] если текущий больше или равен макс - переход
		mov eax, arr[esi] // иначе запоминаем текущий элемент как текущий максимальный
		mov max2, eax

	prime21 :
		add esi, 400 // переходим к след строке этого же столбца
		loop loop21
		// конец цикла 2-1
		mov eax, min2 // запоминаем тек зн-е минимума среди макс
		cmp eax, max2 // сравнивае его с тек максимумом
		jl prime2 // тек минимум меньше - переход
		mov eax, max2 // иначе запоминаем макс текущей строки как минимальный
		mov min2, eax

		prime2 : add ebx, 4 // переходим к следующему столбцу
		mov esi, ebx // задаем номер первого элемента следующего столбца
		pop ecx // возвращаем счетчик цикла loop2 из стека
		loop loop2
		// конец цикла 2
	}

	// ВЫВОД
	if (min2 == max1)
		cout << "Седловая точка со значением " << min2 << "\n" << "; Расположена в строке " << ind / 400 + 1 << " и столбце " << ind % 400 / 4 + 1 << "\n";
	else
		cout << "Седловых точек нет" << "\n";
	return 0;
}
